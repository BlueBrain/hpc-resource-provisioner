---
stages: [tests, verify version, build containers, upload containers]
variables:
  REGISTRY_IMAGE_NAME: hpc-resource-provisioner

.prepare for aws login:
  script:
    - |
      set -x
      if [ "${ENVIRONMENT}" = "production" ]
      then
          export AWS_SHARED_CREDENTIALS_FILE=${AWS_CREDENTIALS}
          export AWS_CONFIG_FILE=${AWS_CONFIG}
          export PROFILE_ARG="--profile 671250183987_FullECSContainersAccess"
      else
          export AWS_SHARED_CREDENTIALS_FILE=${SANDBOX_AWS_CREDENTIALS}
          export AWS_CONFIG_FILE=${AWS_CONFIG}
          export ECR_REPO_URL=${SANDBOX_ECR_REPO_URL}
      fi

test resource provisioner:
  image: ubuntu:22.04
  stage: tests
  script:
    - apt-get update && apt-get install -y python3-pip python3-virtualenv
    - python3 -m virtualenv venv
    - source venv/bin/activate
    - pip3 install -e 'hpc_provisioner[test]'
    - pytest hpc_provisioner
  coverage: /TOTAL.*\s+(\d+%)$/
  artifacts:
    when: always
    reports:
      junit: unittests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
verify version:
  stage: verify version
  image: ubuntu:22.04
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y skopeo awscli
    - mkdir ~/.aws
    - !reference [.prepare for aws login, script]
    - export REGISTRY_IMAGE_TAG=$(awk '/version/ {print $3}' hpc_provisioner/pyproject.toml | tr -d '"')
    - echo "Checking whether ${REGISTRY_IMAGE_TAG} already exists"
    - aws ecr get-login-password --region us-east-1 | skopeo login --username AWS --password-stdin 130659266700.dkr.ecr.us-east-1.amazonaws.com
    - |
      set +e
      skopeo inspect docker://${ECR_REPO_URL}/${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG}
      if [[ $? -eq 0 ]]; then
          echo "${ECR_REPO_URL}/${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG} already exists; you need to bump the version in pyproject.toml"
          exit 1
      else
          echo "${ECR_REPO_URL}/${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG} does not exist yet - proceeding."
      fi

build container:
  stage: build containers
  timeout: 4h
  image:
    name: quay.io/buildah/stable
    entrypoint: ['']
  variables:
    KUBERNETES_CPU_LIMIT: 4
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_MEMORY_REQUEST: 4Gi
    # !! Redefined in "upload to ecr" job - if you modify this one, modify the other one too!
    BUILD_PATH: $CI_PROJECT_DIR
    BUILDAH_EXTRA_ARGS: --label org.opencontainers.image.title="${REGISTRY_IMAGE_NAME}"
      --label org.opencontainers.image.revision="$CI_COMMIT_SHA" --label org.opencontainers.image.authors="$GITLAB_USER_NAME
      <$GITLAB_USER_EMAIL>" --label org.opencontainers.image.url="$CI_PROJECT_URL"
      --label org.opencontainers.image.source="$CI_PROJECT_URL" --label org.opencontainers.image.created="$CI_JOB_STARTED_AT"
      --label ch.epfl.bbpgitlab.ci-pipeline-url="$CI_PIPELINE_URL" --label ch.epfl.bbpgitlab.ci-commit-branch="$CI_COMMIT_BRANCH"
  script:
    - export REGISTRY_IMAGE_TAG=$(awk '/version/ {print $3}' hpc_provisioner/pyproject.toml | tr -d '"')
    - export BUILDAH_EXTRA_ARGS="${BUILDAH_EXTRA_ARGS} --label org.opencontainers.image.version=$REGISTRY_IMAGE_TAG"
    - echo $BUILDAH_EXTRA_ARGS
    - echo $CI_PROJECT_DIR
    - echo $CI_REGISTRY_IMAGE
    - echo $BUILD_PATH
    - export STORAGE_DRIVER=vfs  # allows to build inside containers without additional mounts
    - export BUILDAH_FORMAT=docker  # enables ONBUILD instructions which are not OCI compatible
    - buildah login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "bbpgitlab.epfl.ch:5050"
    - if [[ -n "$DOCKERHUB_USER" && -n "$DOCKERHUB_PASSWORD" ]]; then
    - buildah login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD" "docker.io"
    - fi
    # This is written like that in case $BUILDAH_EXTRA_ARGS has args that require spaces,
    # which is tricky with shell variable expansion.  Similar to Kaniko, see also:
    # https://github.com/GoogleContainerTools/kaniko/issues/1803
    - export IFS=''
    - COMMAND="buildah bud --iidfile image_id $BUILDAH_EXTRA_ARGS $BUILD_PATH"
    - eval "${COMMAND}"
    - buildah push $(<image_id) "docker://$CI_REGISTRY_IMAGE:$REGISTRY_IMAGE_TAG"
      || sleep 10; buildah push $(<image_id) "docker://$CI_REGISTRY_IMAGE:$REGISTRY_IMAGE_TAG"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "web"
upload to ecr:
  image: ubuntu:22.04
  stage: upload containers
  timeout: 2h
  script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y -q awscli podman
    - mkdir ~/.aws
    - export REGISTRY_IMAGE_TAG=$(awk '/version/ {print $3}' hpc_provisioner/pyproject.toml | tr -d '"')
    - !reference [.prepare for aws login, script]
    - |
      aws ecr get-login-password ${PROFILE_ARG} --region us-east-1 | podman login --username AWS --password-stdin ${ECR_REPO_URL}
      podman login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} --tls-verify=false ${CI_REGISTRY}
      podman pull ${CI_REGISTRY_IMAGE}:${REGISTRY_IMAGE_TAG}
      podman push ${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG} ${ECR_REPO_URL}/${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG}
      podman push ${REGISTRY_IMAGE_NAME}:${REGISTRY_IMAGE_TAG} ${ECR_REPO_URL}/${REGISTRY_IMAGE_NAME}:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "web"
